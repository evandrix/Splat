% This file was created with JabRef 2.7.
% Encoding: MacRoman

@INPROCEEDINGS{Cheon2005,
  author = {Yoonsik Cheon and Yoonsik Cheon and Myoung Yee Kim and Myoung Yee
	Kim and Ashaveena Perum and Ashaveena Perum},
  title = {A complete automation of unit testing for Java programs},
  booktitle = {In Proceedings of the 2005 International Conference on Software Engineering
	Research and Practice},
  year = {2005},
  pages = {290--295},
  publisher = {CSREA Press},
  file = {:/Users/lwy08/Downloads/FYP/papers/complete-automation-java.pdf:PDF}
}

@INPROCEEDINGS{Gupta2008,
  author = {Nirmal Kumar Gupta and Mukesh Kumar Rohil},
  title = {Using Genetic Algorithm for Unit Testing of Object Oriented Software},
  booktitle = {Proceedings of the 1st International Conference on Emerging Trends
	in Engineering and Technology (ICETET '08)},
  year = {2008},
  pages = {308--313},
  month = jul,
  publisher = {IEEE},
  abstract = {Genetic algorithms have been successfully applied in the area of software
	testing. The demand for automation of test case generation in object
	oriented software testing is increasing. Genetic algorithms are well
	applied in procedural software testing but a little has been done
	in testing of object oriented software. In this paper, we propose
	a method to generate test cases for classes in object oriented software
	using a genetic programming approach. This method uses tree representation
	of statements in test cases. Strategies for encoding the test cases
	and using the objective function to evolve them as suitable test
	case are proposed.},
  bibsource = {http://www.sebase.org/sbse/publications/repository.html},
  doi = {doi:10.1109/ICETET.2008.137},
  file = {:/Users/lwy08/Downloads/FYP/papers/paper11.pdf:PDF},
  keywords = {genetic algorithms, genetic programming, object-oriented methods,
	program testing, object oriented software unit testing, test case
	generation},
  notes = {Also known as \cite{4579916}
	
	 Java, HTMLparser},
  size = {6 pages}
}

@INPROCEEDINGS{Michael1997,
  author = {Michael, C. C. and McGraw, G. E. and Schatz, M. A. and Walton, C.
	C.},
  title = {Genetic algorithms for dynamic test data generation},
  booktitle = {Proceedings of the 12th international conference on Automated software
	engineering (formerly: KBSE)},
  year = {1997},
  series = {ASE '97},
  pages = {307--},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid = {786793},
  file = {:/Users/lwy08/Downloads/FYP/papers/atc2gp.pdf:PDF},
  isbn = {0-8186-7961-1},
  keywords = {combinatorial optimization, genetic algorithms, program features,
	random test generation, software testing, test adequacy criteria,
	test data generation, test generation},
  url = {http://dl.acm.org/citation.cfm?id=786767.786793}
}

@INPROCEEDINGS{AlexGroceSep2011,
  author = {Alex Groce \& Chaoqiang Zhang \& Eric Eide \& Yang Chen \& John Regehr},
  title = {Swarm Testing},
  booktitle = {Swarm Testing},
  year = {Sep 2011},
  organization = {Oregon State University, Corvallis, OR; University of Utah},
  file = {:/Users/lwy08/Downloads/FYP/papers/swarm12.pdf:PDF},
  timestamp = {2011.10.27}
}

@ARTICLE{Seesing2006,
  author = {Arjan Seesing and Hans-Gerhard Gross},
  title = {A Genetic Programming Approach to Automated Test Generation for Object-Oriented
	Software},
  journal = {International Transactions on Systems Science and Applications},
  year = {2006},
  volume = {1},
  pages = {127--134},
  number = {2},
  month = sep,
  note = {Special Issue Section on Evaluation of Novel Approaches to Software
	Engineering Guest Editors: Pericles Loucopoulos and Kalle Lyytinen},
  abstract = {This article proposes a new method for creating test software for
	object-oriented systems using a genetic programming approach. It
	is believed that this approach is advantageous over the more established
	search-based test-case generation approaches because the test software
	is represented and altered as a fully functional computer program.
	Genetic programming (GP) uses a tree-shaped data structure which
	is more directly comparable and suitable for being mapped instantly
	to abstract syntax trees commonly used in computer languages and
	compilers. These structures can be manipulated and executed directly,
	bypassing intricate and error prone conversion procedures between
	different representations. In addition, tree structures make more
	operations possible, which keep the structure and semantics of the
	evolving test software better intact during program evolution, compared
	to linear structures. This speeds up the evolutionary program generation
	process because the loss of evolved structures due to mutations and
	crossover is prevented more effectively.},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  file = {:/Users/lwy08/Downloads/FYP/papers/10.1.1.97.4413.pdf:PDF},
  issn = {1751-1461},
  keywords = {genetic algorithms, genetic programming, SBSE, search-based testing,
	test automation, object-oriented programming},
  notes = {ITSSA http://siwn.org.uk/press/sai/itssa0001.htm}
}

@OTHER{Pymodel2010,
  file = {:/Users/lwy08/Downloads/FYP/papers/pymodel-scipy2011.pdf:PDF},
  howpublished = {\url{http://staff.washington.edu/jon/pymodel/www/}},
  month = mar,
  title = {PyModel: Model-based testing in Python},
  year = {2010}
}

@comment{jabref-meta: selector_review:}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:}

