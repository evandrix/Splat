[{"fn_name": "maximum_flow", "stmts_list": ["self.assertRaises(AttributeError, self.module.maximum_flow, *[None, None, None, None])"], "add_params": null, "test_name": "all_Nones"}, {"fn_name": "cut_value", "stmts_list": ["self.assertRaises(AttributeError, self.module.cut_value, *[None, None, None])"], "add_params": null, "test_name": "all_Nones"}, {"fn_name": "minimal_spanning_tree", "stmts_list": ["self.assertRaises(TypeError, self.module.minimal_spanning_tree, *[None, None])"], "add_params": null, "test_name": "all_Nones"}, {"fn_name": "self.module.heuristic_search", "stmts_list": ["self.assertNotRaises(self.module.heuristic_search, *[None, None, None, None])", "self.assertEqual(self.module.heuristic_search(*[None, None, None, None]), [None], function return value not equal)"], "add_params": null, "test_name": "all_Nones"}, {"fn_name": "cut_tree", "stmts_list": ["self.assertRaises(AttributeError, self.module.cut_tree, *[None, None])"], "add_params": null, "test_name": "all_Nones"}, {"fn_name": "shortest_path_bellman_ford", "stmts_list": ["self.assertRaises(AttributeError, self.module.shortest_path_bellman_ford, *[None, None])"], "add_params": null, "test_name": "all_Nones"}, {"fn_name": "shortest_path", "stmts_list": ["self.assertRaises(TypeError, self.module.shortest_path, *[None, None])"], "add_params": null, "test_name": "all_Nones"}]
