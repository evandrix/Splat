from unwind.ast import *
from unwind.op import *

tests = {}

# a, b = c, d
# a, b, c = d, e, f
# a, b, c, d = e, f, g, h
tests['test tuple assign'] = Block(
    Opcode(0, 3, LOAD_FAST, Const('c')),
    Opcode(3, 3, LOAD_FAST, Const('d')),
    Opcode(6, 1, ROT_TWO, None),
    Opcode(7, 3, STORE_FAST, Const('a')),
    Opcode(10, 3, STORE_FAST, Const('b')),
    Opcode(13, 3, LOAD_FAST, Const('d')),
    Opcode(16, 3, LOAD_GLOBAL, Const('e')),
    Opcode(19, 3, LOAD_GLOBAL, Const('f')),
    Opcode(22, 1, ROT_THREE, None),
    Opcode(23, 1, ROT_TWO, None),
    Opcode(24, 3, STORE_FAST, Const('a')),
    Opcode(27, 3, STORE_FAST, Const('b')),
    Opcode(30, 3, STORE_FAST, Const('c')),
    Opcode(33, 3, LOAD_GLOBAL, Const('e')),
    Opcode(36, 3, LOAD_GLOBAL, Const('f')),
    Opcode(39, 3, LOAD_GLOBAL, Const('g')),
    Opcode(42, 3, LOAD_GLOBAL, Const('h')),
    Opcode(45, 3, BUILD_TUPLE, Const(4)),
    Opcode(48, 3, UNPACK_SEQUENCE, Const(4)),
    Opcode(51, 3, STORE_FAST, Const('a')),
    Opcode(54, 3, STORE_FAST, Const('b')),
    Opcode(57, 3, STORE_FAST, Const('c')),
    Opcode(60, 3, STORE_FAST, Const('d')),
)

# x = 2 + 2
# print x, 1, x, 1
tests['test dup top'] = Block(
    Opcode(0, 3, LOAD_CONST, Const(1)),
    Opcode(1, 3, LOAD_CONST, Const(2)),
    Opcode(2, 1, DUP_TOP, None),
    Opcode(3, 1, BINARY_ADD, None),
    Opcode(4, 3, DUP_TOPX, Const(2)),
    Opcode(5, 1, PRINT_ITEM, None),
    Opcode(6, 1, PRINT_ITEM, None),
    Opcode(7, 1, PRINT_ITEM, None),
    Opcode(8, 1, PRINT_ITEM, None),
    Opcode(9, 1, PRINT_NEWLINE, None),
)

# print 'foo'
# a, b = (1, 2 + 3) if True else (4, Const(5))
# print a, b
tests['partially decompiled if'] = Block(
    If(
        Const(True),
        Block(
            Opcode(0, 3, LOAD_CONST, Const(1)),
            Opcode(1, 3, LOAD_CONST, Const(2)),
            Opcode(2, 3, LOAD_CONST, Const(3)),
            Opcode(3, 1, BINARY_ADD, None),
        ),
        Else(Block(
            Opcode(4, 3, LOAD_CONST, Const(4)),
            If(
                Const(True),
                Block(
                    Opcode(5, 3, LOAD_CONST, Const('foo')),
                    Opcode(6, 1, PRINT_ITEM, None),
                    Opcode(7, 1, PRINT_NEWLINE, None),
                ),
                None,
            ),
            Opcode(8, 3, LOAD_CONST, Const(5)),
        )),
    ),
    Opcode(9, 1, ROT_TWO, None),
    Opcode(10, 1, PRINT_ITEM, None),
    Opcode(11, 1, PRINT_ITEM, None),
    Opcode(12, 1, PRINT_NEWLINE, None),
)

# a = 1
# return a
tests['inlining'] = Block(
    Opcode(0, 3, LOAD_CONST, Const(1)),
    Opcode(1, 3, STORE_NAME, Const('a')),
    Opcode(2, 3, LOAD_NAME, Const('a')),
    Opcode(3, 1, RETURN_VALUE, None),
)

# global a, b
# a = 1
# return a
tests['global'] = Block(
    Opcode(0, 3, LOAD_CONST, Const(1)),
    Opcode(1, 3, STORE_GLOBAL, Const('a')),
    Opcode(2, 3, LOAD_GLOBAL, Const('a')),
    Opcode(3, 1, RETURN_VALUE, None),
)

# b, a = 0, a + b
tests['inlining in parallel assignment'] = Block(
    Comment('a, b = 0, a + b'),
    Opcode(0, 3, LOAD_CONST, Const(0)),
    Opcode(1, 3, LOAD_NAME, Const('a')),
    Opcode(2, 3, LOAD_NAME, Const('b')),
    Opcode(3, 1, BINARY_ADD, None),
    Opcode(4, 1, ROT_TWO, None),
    Opcode(5, 3, STORE_NAME, Const('a')),
    Opcode(6, 3, STORE_NAME, Const('b')),
)

# $0 = d
# a, b = c, $0
tests['inlining blocked by order'] = Block(
    Comment('this should not be inlined to "a, b = c, d" because d is evaluated before c'),
    Opcode(0, 3, LOAD_NAME, Const('d')),
    Opcode(1, 3, LOAD_NAME, Const('c')),
    Opcode(3, 3, STORE_NAME, Const('a')),
    Opcode(4, 3, STORE_NAME, Const('b')),
)

# $0 = a
# return b + $0
tests['inlining blocked by order 2'] = Block(
    Comment('this should not be inlined to "return b + a" because a is evaluated before b'),
    Opcode(0, 3, LOAD_NAME, Const('a')),
    Opcode(1, 3, LOAD_NAME, Const('b')),
    Opcode(2, 1, ROT_TWO, None),
    Opcode(3, 1, BINARY_ADD, None),
    Opcode(4, 1, RETURN_VALUE, None),
)

tests['function call'] = Block(
    Opcode(0, 3, LOAD_NAME, Const('a')),
    Opcode(1, 3, CALL_FUNCTION, Const(0)),
    Opcode(2, 1, POP_TOP, None),
    Opcode(3, 3, LOAD_NAME, Const('b')),
    Opcode(4, 3, LOAD_CONST, Const(1)),
    Opcode(5, 3, CALL_FUNCTION, Const(1)),
    Opcode(6, 1, POP_TOP, None),
    Opcode(7, 3, LOAD_NAME, Const('c')),
    Opcode(8, 3, LOAD_CONST, Const(1)),
    Opcode(9, 3, LOAD_CONST, Const(2)),
    Opcode(10, 3, CALL_FUNCTION, Const(2)),
    Opcode(11, 1, POP_TOP, None),
    Opcode(12, 3, LOAD_NAME, Const('d')),
    Opcode(13, 3, LOAD_CONST, Const(1)),
    Opcode(14, 3, LOAD_CONST, Const(2)),
    Opcode(15, 3, LOAD_CONST, Const(3)),
    Opcode(16, 3, CALL_FUNCTION, Const(3)),
    Opcode(17, 1, POP_TOP, None),
    Opcode(18, 3, LOAD_NAME, Const('e')),
    Opcode(19, 3, LOAD_CONST, Const(True)),
    Opcode(20, 3, LOAD_CONST, Const(False)),
    Opcode(21, 3, LOAD_CONST, Const(None)),
    Opcode(22, 3, LOAD_CONST, Const('x')),
    Opcode(23, 3, LOAD_CONST, Const('1')),
    Opcode(24, 3, LOAD_CONST, Const('y')),
    Opcode(25, 3, LOAD_CONST, Const('2')),
    Opcode(26, 3, CALL_FUNCTION, Const((2 << 8) | 3)),
    Opcode(27, 1, POP_TOP, None),
)

tests['dict literal'] = Block(
    Opcode(0, 3, BUILD_MAP, Const(0)),
    Opcode(1, 1, PRINT_ITEM, None),
    Opcode(2, 3, BUILD_MAP, Const(3)),
    Opcode(3, 3, LOAD_CONST, Const(1)),
    Opcode(4, 3, LOAD_CONST, Const('a')),
    Opcode(5, 1, STORE_MAP, None),
    Opcode(6, 3, LOAD_CONST, Const(2)),
    Opcode(7, 3, LOAD_CONST, Const('b')),
    Opcode(8, 1, STORE_MAP, None),
    Opcode(9, 3, LOAD_CONST, Const(3)),
    Opcode(10, 3, LOAD_CONST, Const('c')),
    Opcode(11, 1, STORE_MAP, None),
    Opcode(12, 1, PRINT_ITEM, None),
    Opcode(13, 1, PRINT_NEWLINE, None),
)

tests['dict literal blocked by print'] = Block(
    Comment('STORE_MAP cannot be folded into the dict literal because'),
    Comment('the print statement needs one of the variables too'),
    Opcode(0, 3, BUILD_MAP, Const(2)),
    Opcode(1, 3, LOAD_NAME, Const('value')),
    Opcode(2, 3, CALL_FUNCTION, Const(0)),
    Opcode(3, 1, DUP_TOP, None),
    Opcode(4, 1, ROT_THREE, None),
    Opcode(5, 3, LOAD_NAME, Const('key')),
    Opcode(6, 3, CALL_FUNCTION, Const(0)),
    Opcode(7, 1, STORE_MAP, None),
    Opcode(8, 1, PRINT_ITEM, None),
    Opcode(9, 1, PRINT_ITEM, None),
    Opcode(10, 1, PRINT_NEWLINE, None),
)

tests['big chunk of code'] = Block(*[
    Comment('original filename: ./disasm.py'),
    Comment('code name: unmarshal_node'),
    Opcode(0, 3, 'LOAD_FAST', Const('self')),
    Opcode(3, 3, 'LOAD_ATTR', Const('read_int8')),
    Opcode(6, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(9, 3, 'STORE_FAST', Const('type')),
    Opcode(12, 3, 'LOAD_FAST', Const('type')),
    Opcode(15, 3, 'LOAD_GLOBAL', Const('TYPE_NONE')),
    Opcode(18, 3, 'COMPARE_OP', Const(2)),
    Opcode(21, 3, 'POP_JUMP_IF_FALSE', Const(34)),
    Opcode(24, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(27, 3, 'LOAD_CONST', Const(None)),
    Opcode(30, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(33, 1, 'RETURN_VALUE', None),
    Opcode(34, 3, 'LOAD_FAST', Const('type')),
    Opcode(37, 3, 'LOAD_GLOBAL', Const('TYPE_TRUE')),
    Opcode(40, 3, 'COMPARE_OP', Const(2)),
    Opcode(43, 3, 'POP_JUMP_IF_FALSE', Const(56)),
    Opcode(46, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(49, 3, 'LOAD_CONST', Const(True)),
    Opcode(52, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(55, 1, 'RETURN_VALUE', None),
    Opcode(56, 3, 'LOAD_FAST', Const('type')),
    Opcode(59, 3, 'LOAD_GLOBAL', Const('TYPE_FALSE')),
    Opcode(62, 3, 'COMPARE_OP', Const(2)),
    Opcode(65, 3, 'POP_JUMP_IF_FALSE', Const(78)),
    Opcode(68, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(71, 3, 'LOAD_CONST', Const(False)),
    Opcode(74, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(77, 1, 'RETURN_VALUE', None),
    Opcode(78, 3, 'LOAD_FAST', Const('type')),
    Opcode(81, 3, 'LOAD_GLOBAL', Const('TYPE_TUPLE')),
    Opcode(84, 3, 'COMPARE_OP', Const(2)),
    Opcode(87, 3, 'POP_JUMP_IF_FALSE', Const(103)),
    Opcode(90, 3, 'LOAD_FAST', Const('self')),
    Opcode(93, 3, 'LOAD_ATTR', Const('unmarshal_collection')),
    Opcode(96, 3, 'LOAD_GLOBAL', Const('Tuple')),
    Opcode(99, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(102, 1, 'RETURN_VALUE', None),
    Opcode(103, 3, 'LOAD_FAST', Const('type')),
    Opcode(106, 3, 'LOAD_GLOBAL', Const('TYPE_LIST')),
    Opcode(109, 3, 'COMPARE_OP', Const(2)),
    Opcode(112, 3, 'POP_JUMP_IF_FALSE', Const(128)),
    Opcode(115, 3, 'LOAD_FAST', Const('self')),
    Opcode(118, 3, 'LOAD_ATTR', Const('unmarshal_collection')),
    Opcode(121, 3, 'LOAD_GLOBAL', Const('List')),
    Opcode(124, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(127, 1, 'RETURN_VALUE', None),
    Opcode(128, 3, 'LOAD_FAST', Const('type')),
    Opcode(131, 3, 'LOAD_GLOBAL', Const('TYPE_SET')),
    Opcode(134, 3, 'COMPARE_OP', Const(2)),
    Opcode(137, 3, 'POP_JUMP_IF_FALSE', Const(174)),
    Opcode(140, 3, 'LOAD_GLOBAL', Const('Call')),
    Opcode(143, 3, 'LOAD_GLOBAL', Const('Ident')),
    Opcode(146, 3, 'LOAD_CONST', Const('set')),
    Opcode(149, 3, 'LOAD_GLOBAL', Const('Tuple')),
    Opcode(152, 3, 'LOAD_FAST', Const('self')),
    Opcode(155, 3, 'LOAD_ATTR', Const('unmarshal_collection')),
    Opcode(158, 3, 'LOAD_GLOBAL', Const('List')),
    Opcode(161, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(164, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(167, 3, 'CALL_FUNCTION', Const(2)),
    Opcode(170, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(173, 1, 'RETURN_VALUE', None),
    Opcode(174, 3, 'LOAD_FAST', Const('type')),
    Opcode(177, 3, 'LOAD_GLOBAL', Const('TYPE_FROZEN_SET')),
    Opcode(180, 3, 'COMPARE_OP', Const(2)),
    Opcode(183, 3, 'POP_JUMP_IF_FALSE', Const(220)),
    Opcode(186, 3, 'LOAD_GLOBAL', Const('Call')),
    Opcode(189, 3, 'LOAD_GLOBAL', Const('Ident')),
    Opcode(192, 3, 'LOAD_CONST', Const('frozenset')),
    Opcode(195, 3, 'LOAD_GLOBAL', Const('Tuple')),
    Opcode(198, 3, 'LOAD_FAST', Const('self')),
    Opcode(201, 3, 'LOAD_ATTR', Const('unmarshal_collection')),
    Opcode(204, 3, 'LOAD_GLOBAL', Const('List')),
    Opcode(207, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(210, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(213, 3, 'CALL_FUNCTION', Const(2)),
    Opcode(216, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(219, 1, 'RETURN_VALUE', None),
    Opcode(220, 3, 'LOAD_FAST', Const('type')),
    Opcode(223, 3, 'LOAD_GLOBAL', Const('TYPE_INT')),
    Opcode(226, 3, 'COMPARE_OP', Const(2)),
    Opcode(229, 3, 'POP_JUMP_IF_FALSE', Const(248)),
    Opcode(232, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(235, 3, 'LOAD_FAST', Const('self')),
    Opcode(238, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(241, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(244, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(247, 1, 'RETURN_VALUE', None),
    Opcode(248, 3, 'LOAD_FAST', Const('type')),
    Opcode(251, 3, 'LOAD_GLOBAL', Const('TYPE_BINARY_FLOAT')),
    Opcode(254, 3, 'COMPARE_OP', Const(2)),
    Opcode(257, 3, 'POP_JUMP_IF_FALSE', Const(298)),
    Opcode(260, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(263, 3, 'LOAD_GLOBAL', Const('struct')),
    Opcode(266, 3, 'LOAD_ATTR', Const('unpack')),
    Opcode(269, 3, 'LOAD_CONST', Const('=f')),
    Opcode(272, 3, 'LOAD_FAST', Const('self')),
    Opcode(275, 3, 'LOAD_ATTR', Const('file')),
    Opcode(278, 3, 'LOAD_ATTR', Const('read')),
    Opcode(281, 3, 'LOAD_CONST', Const(4)),
    Opcode(284, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(287, 3, 'CALL_FUNCTION', Const(2)),
    Opcode(290, 3, 'LOAD_CONST', Const(0)),
    Opcode(293, 1, 'BINARY_SUBSCR', None),
    Opcode(294, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(297, 1, 'RETURN_VALUE', None),
    Opcode(298, 3, 'LOAD_FAST', Const('type')),
    Opcode(301, 3, 'LOAD_GLOBAL', Const('TYPE_STRING')),
    Opcode(304, 3, 'COMPARE_OP', Const(2)),
    Opcode(307, 3, 'POP_JUMP_IF_FALSE', Const(326)),
    Opcode(310, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(313, 3, 'LOAD_FAST', Const('self')),
    Opcode(316, 3, 'LOAD_ATTR', Const('read_string_ascii')),
    Opcode(319, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(322, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(325, 1, 'RETURN_VALUE', None),
    Opcode(326, 3, 'LOAD_FAST', Const('type')),
    Opcode(329, 3, 'LOAD_GLOBAL', Const('TYPE_UNICODE')),
    Opcode(332, 3, 'COMPARE_OP', Const(2)),
    Opcode(335, 3, 'POP_JUMP_IF_FALSE', Const(354)),
    Opcode(338, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(341, 3, 'LOAD_FAST', Const('self')),
    Opcode(344, 3, 'LOAD_ATTR', Const('read_string_utf8')),
    Opcode(347, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(350, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(353, 1, 'RETURN_VALUE', None),
    Opcode(354, 3, 'LOAD_FAST', Const('type')),
    Opcode(357, 3, 'LOAD_GLOBAL', Const('TYPE_INTERNED')),
    Opcode(360, 3, 'COMPARE_OP', Const(2)),
    Opcode(363, 3, 'POP_JUMP_IF_FALSE', Const(404)),
    Opcode(366, 3, 'LOAD_FAST', Const('self')),
    Opcode(369, 3, 'LOAD_ATTR', Const('read_string_ascii')),
    Opcode(372, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(375, 3, 'STORE_FAST', Const('data')),
    Opcode(378, 3, 'LOAD_FAST', Const('self')),
    Opcode(381, 3, 'LOAD_ATTR', Const('string_table')),
    Opcode(384, 3, 'LOAD_ATTR', Const('append')),
    Opcode(387, 3, 'LOAD_FAST', Const('data')),
    Opcode(390, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(393, 1, 'POP_TOP', None),
    Opcode(394, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(397, 3, 'LOAD_FAST', Const('data')),
    Opcode(400, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(403, 1, 'RETURN_VALUE', None),
    Opcode(404, 3, 'LOAD_FAST', Const('type')),
    Opcode(407, 3, 'LOAD_GLOBAL', Const('TYPE_STRING_REF')),
    Opcode(410, 3, 'COMPARE_OP', Const(2)),
    Opcode(413, 3, 'POP_JUMP_IF_FALSE', Const(497)),
    Opcode(416, 3, 'LOAD_FAST', Const('self')),
    Opcode(419, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(422, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(425, 3, 'STORE_FAST', Const('index')),
    Opcode(428, 3, 'LOAD_FAST', Const('index')),
    Opcode(431, 3, 'LOAD_CONST', Const(0)),
    Opcode(434, 3, 'COMPARE_OP', Const(0)),
    Opcode(437, 3, 'POP_JUMP_IF_TRUE', Const(461)),
    Opcode(440, 3, 'LOAD_FAST', Const('index')),
    Opcode(443, 3, 'LOAD_GLOBAL', Const('len')),
    Opcode(446, 3, 'LOAD_FAST', Const('self')),
    Opcode(449, 3, 'LOAD_ATTR', Const('string_table')),
    Opcode(452, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(455, 3, 'COMPARE_OP', Const(5)),
    Opcode(458, 3, 'POP_JUMP_IF_FALSE', Const(480)),
    Opcode(461, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(464, 3, 'LOAD_CONST', Const('string index %d is outside string table')),
    Opcode(467, 3, 'LOAD_FAST', Const('index')),
    Opcode(470, 1, 'BINARY_MODULO', None),
    Opcode(471, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(474, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(477, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(480, 3, 'LOAD_GLOBAL', Const('Const')),
    Opcode(483, 3, 'LOAD_FAST', Const('self')),
    Opcode(486, 3, 'LOAD_ATTR', Const('string_table')),
    Opcode(489, 3, 'LOAD_FAST', Const('index')),
    Opcode(492, 1, 'BINARY_SUBSCR', None),
    Opcode(493, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(496, 1, 'RETURN_VALUE', None),
    Opcode(497, 3, 'LOAD_FAST', Const('type')),
    Opcode(500, 3, 'LOAD_GLOBAL', Const('TYPE_CODE')),
    Opcode(503, 3, 'COMPARE_OP', Const(2)),
    Opcode(506, 3, 'POP_JUMP_IF_FALSE', Const(1340)),
    Opcode(509, 3, 'LOAD_FAST', Const('self')),
    Opcode(512, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(515, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(518, 3, 'STORE_FAST', Const('arg_count')),
    Opcode(521, 3, 'LOAD_GLOBAL', Const('repo_info')),
    Opcode(524, 3, 'LOAD_ATTR', Const('has_kwarg_count')),
    Opcode(527, 3, 'LOAD_FAST', Const('self')),
    Opcode(530, 3, 'LOAD_ATTR', Const('file_version')),
    Opcode(533, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(536, 3, 'POP_JUMP_IF_FALSE', Const(551)),
    Opcode(539, 3, 'LOAD_FAST', Const('self')),
    Opcode(542, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(545, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(548, 3, 'JUMP_FORWARD', Const(3)),
    Opcode(551, 3, 'LOAD_CONST', Const(0)),
    Opcode(554, 3, 'STORE_FAST', Const('kwarg_count')),
    Opcode(557, 3, 'LOAD_FAST', Const('self')),
    Opcode(560, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(563, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(566, 3, 'STORE_FAST', Const('local_count')),
    Opcode(569, 3, 'LOAD_FAST', Const('self')),
    Opcode(572, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(575, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(578, 3, 'STORE_FAST', Const('max_stack_depth')),
    Opcode(581, 3, 'LOAD_FAST', Const('self')),
    Opcode(584, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(587, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(590, 3, 'STORE_FAST', Const('flags')),
    Opcode(593, 3, 'LOAD_FAST', Const('self')),
    Opcode(596, 3, 'LOAD_ATTR', Const('read_int8')),
    Opcode(599, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(602, 3, 'LOAD_GLOBAL', Const('TYPE_STRING')),
    Opcode(605, 3, 'COMPARE_OP', Const(3)),
    Opcode(608, 3, 'POP_JUMP_IF_FALSE', Const(626)),
    Opcode(611, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(614, 3, 'LOAD_CONST', Const('bytecode was not marshalled as a string')),
    Opcode(617, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(620, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(623, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(626, 3, 'LOAD_FAST', Const('self')),
    Opcode(629, 3, 'LOAD_ATTR', Const('read_byte_array')),
    Opcode(632, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(635, 3, 'STORE_FAST', Const('bytecode')),
    Opcode(638, 3, 'LOAD_FAST', Const('self')),
    Opcode(641, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(644, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(647, 3, 'STORE_FAST', Const('constants')),
    Opcode(650, 3, 'LOAD_FAST', Const('self')),
    Opcode(653, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(656, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(659, 3, 'STORE_FAST', Const('names')),
    Opcode(662, 3, 'LOAD_FAST', Const('self')),
    Opcode(665, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(668, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(671, 3, 'STORE_FAST', Const('variables')),
    Opcode(674, 3, 'LOAD_FAST', Const('self')),
    Opcode(677, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(680, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(683, 3, 'STORE_FAST', Const('free_vars')),
    Opcode(686, 3, 'LOAD_FAST', Const('self')),
    Opcode(689, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(692, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(695, 3, 'STORE_FAST', Const('cell_vars')),
    Opcode(698, 3, 'LOAD_FAST', Const('self')),
    Opcode(701, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(704, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(707, 3, 'STORE_FAST', Const('original_filename')),
    Opcode(710, 3, 'LOAD_FAST', Const('self')),
    Opcode(713, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(716, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(719, 3, 'STORE_FAST', Const('code_name')),
    Opcode(722, 3, 'LOAD_FAST', Const('self')),
    Opcode(725, 3, 'LOAD_ATTR', Const('read_int32')),
    Opcode(728, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(731, 3, 'STORE_FAST', Const('first_line_number')),
    Opcode(734, 3, 'LOAD_FAST', Const('self')),
    Opcode(737, 3, 'LOAD_ATTR', Const('unmarshal_node')),
    Opcode(740, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(743, 3, 'STORE_FAST', Const('line_numbers')),
    Opcode(746, 3, 'LOAD_GLOBAL', Const('Block')),
    Opcode(749, 3, 'CALL_FUNCTION', Const(0)),
    Opcode(752, 3, 'STORE_FAST', Const('block')),
    Opcode(755, 3, 'LOAD_FAST', Const('block')),
    Opcode(758, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(761, 3, 'LOAD_ATTR', Const('append')),
    Opcode(764, 3, 'LOAD_GLOBAL', Const('Comment')),
    Opcode(767, 3, 'LOAD_CONST', Const('original filename: ')),
    Opcode(770, 3, 'LOAD_FAST', Const('original_filename')),
    Opcode(773, 3, 'LOAD_ATTR', Const('value')),
    Opcode(776, 1, 'BINARY_ADD', None),
    Opcode(777, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(780, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(783, 1, 'POP_TOP', None),
    Opcode(784, 3, 'LOAD_FAST', Const('block')),
    Opcode(787, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(790, 3, 'LOAD_ATTR', Const('append')),
    Opcode(793, 3, 'LOAD_GLOBAL', Const('Comment')),
    Opcode(796, 3, 'LOAD_CONST', Const('code name: ')),
    Opcode(799, 3, 'LOAD_FAST', Const('code_name')),
    Opcode(802, 3, 'LOAD_ATTR', Const('value')),
    Opcode(805, 1, 'BINARY_ADD', None),
    Opcode(806, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(809, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(812, 1, 'POP_TOP', None),
    Opcode(813, 3, 'LOAD_CONST', Const(0)),
    Opcode(816, 3, 'STORE_FAST', Const('argument')),
    Opcode(819, 3, 'LOAD_CONST', Const(0)),
    Opcode(822, 3, 'STORE_FAST', Const('i')),
    Opcode(825, 3, 'SETUP_LOOP', Const(508)),
    Opcode(828, 3, 'LOAD_FAST', Const('i')),
    Opcode(831, 3, 'LOAD_GLOBAL', Const('len')),
    Opcode(834, 3, 'LOAD_FAST', Const('bytecode')),
    Opcode(837, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(840, 3, 'COMPARE_OP', Const(0)),
    Opcode(843, 3, 'POP_JUMP_IF_FALSE', Const(1335)),
    Opcode(846, 3, 'LOAD_FAST', Const('i')),
    Opcode(849, 3, 'STORE_FAST', Const('offset')),
    Opcode(852, 3, 'LOAD_GLOBAL', Const('repo_info')),
    Opcode(855, 3, 'LOAD_ATTR', Const('opcode_for_magic')),
    Opcode(858, 3, 'LOAD_FAST', Const('self')),
    Opcode(861, 3, 'LOAD_ATTR', Const('file_version')),
    Opcode(864, 3, 'LOAD_FAST', Const('bytecode')),
    Opcode(867, 3, 'LOAD_FAST', Const('i')),
    Opcode(870, 1, 'BINARY_SUBSCR', None),
    Opcode(871, 3, 'CALL_FUNCTION', Const(2)),
    Opcode(874, 3, 'STORE_FAST', Const('op')),
    Opcode(877, 3, 'LOAD_FAST', Const('op')),
    Opcode(880, 3, 'LOAD_GLOBAL', Const('INVALID_OPCODE')),
    Opcode(883, 3, 'COMPARE_OP', Const(2)),
    Opcode(886, 3, 'POP_JUMP_IF_FALSE', Const(912)),
    Opcode(889, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(892, 3, 'LOAD_CONST', Const('unknown opcode: %d')),
    Opcode(895, 3, 'LOAD_FAST', Const('bytecode')),
    Opcode(898, 3, 'LOAD_FAST', Const('i')),
    Opcode(901, 1, 'BINARY_SUBSCR', None),
    Opcode(902, 1, 'BINARY_MODULO', None),
    Opcode(903, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(906, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(909, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(912, 3, 'LOAD_FAST', Const('i')),
    Opcode(915, 3, 'LOAD_CONST', Const(1)),
    Opcode(918, 1, 'INPLACE_ADD', None),
    Opcode(919, 3, 'STORE_FAST', Const('i')),
    Opcode(922, 3, 'LOAD_FAST', Const('op')),
    Opcode(925, 3, 'LOAD_GLOBAL', Const('have_argument')),
    Opcode(928, 3, 'COMPARE_OP', Const(6)),
    Opcode(931, 3, 'POP_JUMP_IF_FALSE', Const(991)),
    Opcode(934, 3, 'LOAD_FAST', Const('bytecode')),
    Opcode(937, 3, 'LOAD_FAST', Const('i')),
    Opcode(940, 3, 'LOAD_FAST', Const('i')),
    Opcode(943, 3, 'LOAD_CONST', Const(2)),
    Opcode(946, 1, 'BINARY_ADD', None),
    Opcode(947, 3, 'BUILD_SLICE', Const(2)),
    Opcode(950, 1, 'BINARY_SUBSCR', None),
    Opcode(951, 3, 'UNPACK_SEQUENCE', Const(2)),
    Opcode(954, 3, 'STORE_FAST', Const('lo')),
    Opcode(957, 3, 'STORE_FAST', Const('hi')),
    Opcode(960, 3, 'LOAD_FAST', Const('argument')),
    Opcode(963, 3, 'LOAD_FAST', Const('lo')),
    Opcode(966, 3, 'LOAD_FAST', Const('hi')),
    Opcode(969, 3, 'LOAD_CONST', Const(8)),
    Opcode(972, 1, 'BINARY_LSHIFT', None),
    Opcode(973, 1, 'BINARY_OR', None),
    Opcode(974, 1, 'INPLACE_OR', None),
    Opcode(975, 3, 'STORE_FAST', Const('argument')),
    Opcode(978, 3, 'LOAD_FAST', Const('i')),
    Opcode(981, 3, 'LOAD_CONST', Const(2)),
    Opcode(984, 1, 'INPLACE_ADD', None),
    Opcode(985, 3, 'STORE_FAST', Const('i')),
    Opcode(988, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(991, 3, 'LOAD_FAST', Const('op')),
    Opcode(994, 3, 'LOAD_GLOBAL', Const('EXTENDED_ARG')),
    Opcode(997, 3, 'COMPARE_OP', Const(2)),
    Opcode(1000, 3, 'POP_JUMP_IF_FALSE', Const(1019)),
    Opcode(1003, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1006, 3, 'LOAD_CONST', Const(16)),
    Opcode(1009, 1, 'INPLACE_LSHIFT', None),
    Opcode(1010, 3, 'STORE_FAST', Const('argument')),
    Opcode(1013, 3, 'JUMP_ABSOLUTE', Const(828)),
    Opcode(1016, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(1019, 3, 'LOAD_CONST', Const(None)),
    Opcode(1022, 3, 'STORE_FAST', Const('arg')),
    Opcode(1025, 3, 'LOAD_FAST', Const('op')),
    Opcode(1028, 3, 'LOAD_GLOBAL', Const('have_argument')),
    Opcode(1031, 3, 'COMPARE_OP', Const(6)),
    Opcode(1034, 3, 'POP_JUMP_IF_FALSE', Const(1304)),
    Opcode(1037, 3, 'LOAD_FAST', Const('op')),
    Opcode(1040, 3, 'LOAD_GLOBAL', Const('LOAD_CONST')),
    Opcode(1043, 3, 'COMPARE_OP', Const(2)),
    Opcode(1046, 3, 'POP_JUMP_IF_FALSE', Const(1111)),
    Opcode(1049, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1052, 3, 'LOAD_GLOBAL', Const('len')),
    Opcode(1055, 3, 'LOAD_FAST', Const('constants')),
    Opcode(1058, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1061, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(1064, 3, 'COMPARE_OP', Const(5)),
    Opcode(1067, 3, 'POP_JUMP_IF_FALSE', Const(1095)),
    Opcode(1070, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(1073, 3, 'LOAD_CONST', Const('invalid argument %d for opcode %s')),
    Opcode(1076, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1079, 3, 'LOAD_FAST', Const('op')),
    Opcode(1082, 3, 'BUILD_TUPLE', Const(2)),
    Opcode(1085, 1, 'BINARY_MODULO', None),
    Opcode(1086, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(1089, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(1092, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(1095, 3, 'LOAD_FAST', Const('constants')),
    Opcode(1098, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1101, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1104, 1, 'BINARY_SUBSCR', None),
    Opcode(1105, 3, 'STORE_FAST', Const('arg')),
    Opcode(1108, 3, 'JUMP_ABSOLUTE', Const(1304)),
    Opcode(1111, 3, 'LOAD_FAST', Const('op')),
    Opcode(1114, 3, 'LOAD_GLOBAL', Const('LOAD_NAME')),
    Opcode(1117, 3, 'LOAD_GLOBAL', Const('STORE_NAME')),
    Opcode(1120, 3, 'LOAD_GLOBAL', Const('DELETE_NAME')),
    Opcode(1123, 3, 'LOAD_GLOBAL', Const('LOAD_ATTR')),
    Opcode(1126, 3, 'LOAD_GLOBAL', Const('STORE_ATTR')),
    Opcode(1129, 3, 'LOAD_GLOBAL', Const('DELETE_ATTR')),
    Opcode(1132, 3, 'LOAD_GLOBAL', Const('LOAD_GLOBAL')),
    Opcode(1135, 3, 'LOAD_GLOBAL', Const('STORE_GLOBAL')),
    Opcode(1138, 3, 'LOAD_GLOBAL', Const('DELETE_GLOBAL')),
    Opcode(1141, 3, 'LOAD_GLOBAL', Const('IMPORT_NAME')),
    Opcode(1144, 3, 'LOAD_GLOBAL', Const('IMPORT_FROM')),
    Opcode(1147, 3, 'BUILD_LIST', Const(11)),
    Opcode(1150, 3, 'COMPARE_OP', Const(6)),
    Opcode(1153, 3, 'POP_JUMP_IF_FALSE', Const(1215)),
    Opcode(1156, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1159, 3, 'LOAD_FAST', Const('names')),
    Opcode(1162, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1165, 3, 'LOAD_ATTR', Const('Count')),
    Opcode(1168, 3, 'COMPARE_OP', Const(5)),
    Opcode(1171, 3, 'POP_JUMP_IF_FALSE', Const(1199)),
    Opcode(1174, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(1177, 3, 'LOAD_CONST', Const('invalid argument %d for opcode %s')),
    Opcode(1180, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1183, 3, 'LOAD_FAST', Const('op')),
    Opcode(1186, 3, 'BUILD_TUPLE', Const(2)),
    Opcode(1189, 1, 'BINARY_MODULO', None),
    Opcode(1190, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(1193, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(1196, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(1199, 3, 'LOAD_FAST', Const('names')),
    Opcode(1202, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1205, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1208, 1, 'BINARY_SUBSCR', None),
    Opcode(1209, 3, 'STORE_FAST', Const('arg')),
    Opcode(1212, 3, 'JUMP_ABSOLUTE', Const(1304)),
    Opcode(1215, 3, 'LOAD_FAST', Const('op')),
    Opcode(1218, 3, 'LOAD_GLOBAL', Const('LOAD_FAST')),
    Opcode(1221, 3, 'LOAD_GLOBAL', Const('STORE_FAST')),
    Opcode(1224, 3, 'LOAD_GLOBAL', Const('DELETE_FAST')),
    Opcode(1227, 3, 'BUILD_LIST', Const(3)),
    Opcode(1230, 3, 'COMPARE_OP', Const(6)),
    Opcode(1233, 3, 'POP_JUMP_IF_FALSE', Const(1295)),
    Opcode(1236, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1239, 3, 'LOAD_FAST', Const('variables')),
    Opcode(1242, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1245, 3, 'LOAD_ATTR', Const('Count')),
    Opcode(1248, 3, 'COMPARE_OP', Const(5)),
    Opcode(1251, 3, 'POP_JUMP_IF_FALSE', Const(1279)),
    Opcode(1254, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(1257, 3, 'LOAD_CONST', Const('invalid argument %d for opcode %s')),
    Opcode(1260, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1263, 3, 'LOAD_FAST', Const('op')),
    Opcode(1266, 3, 'BUILD_TUPLE', Const(2)),
    Opcode(1269, 1, 'BINARY_MODULO', None),
    Opcode(1270, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(1273, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(1276, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(1279, 3, 'LOAD_FAST', Const('variables')),
    Opcode(1282, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1285, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1288, 1, 'BINARY_SUBSCR', None),
    Opcode(1289, 3, 'STORE_FAST', Const('arg')),
    Opcode(1292, 3, 'JUMP_ABSOLUTE', Const(1304)),
    Opcode(1295, 3, 'LOAD_FAST', Const('argument')),
    Opcode(1298, 3, 'STORE_FAST', Const('arg')),
    Opcode(1301, 3, 'JUMP_FORWARD', Const(0)),
    Opcode(1304, 3, 'LOAD_FAST', Const('block')),
    Opcode(1307, 3, 'LOAD_ATTR', Const('nodes')),
    Opcode(1310, 3, 'LOAD_ATTR', Const('append')),
    Opcode(1313, 3, 'LOAD_GLOBAL', Const('Opcode')),
    Opcode(1316, 3, 'LOAD_FAST', Const('offset')),
    Opcode(1319, 3, 'LOAD_FAST', Const('op')),
    Opcode(1322, 3, 'LOAD_FAST', Const('arg')),
    Opcode(1325, 3, 'CALL_FUNCTION', Const(3)),
    Opcode(1328, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(1331, 1, 'POP_TOP', None),
    Opcode(1332, 3, 'JUMP_ABSOLUTE', Const(828)),
    Opcode(1335, 1, 'POP_BLOCK', None),
    Opcode(1336, 3, 'LOAD_FAST', Const('block')),
    Opcode(1339, 1, 'RETURN_VALUE', None),
    Opcode(1340, 3, 'LOAD_GLOBAL', Const('DisassemblerException')),
    Opcode(1343, 3, 'LOAD_CONST', Const('cannot unmarshal unknown type: 0x%02X')),
    Opcode(1346, 3, 'LOAD_FAST', Const('type')),
    Opcode(1349, 1, 'BINARY_MODULO', None),
    Opcode(1350, 3, 'CALL_FUNCTION', Const(1)),
    Opcode(1353, 3, 'RAISE_VARARGS', Const(1)),
    Opcode(1356, 3, 'LOAD_CONST', Const(None)),
    Opcode(1359, 1, 'RETURN_VALUE', None),
])

if __name__ == '__main__':
    from unwind.passes import Context
    from unwind.codegen import SourceCodeGenerator

    for test in sorted(tests.keys()):
        print('\n' + '-' * 80 + '\n' + test.center(80) + '\n' + '-' * 80)
        node = tests[test]

        print('\n# disassembly')
        print(node.accept(SourceCodeGenerator()))

        print('\n# decompiled')
        node = Context().decompile(node)
        print(node.accept(SourceCodeGenerator()))
