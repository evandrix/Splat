Metadata-Version: 1.0
Name: pystache
Version: 0.3.1
Summary: Mustache for Python
Home-page: http://github.com/defunkt/pystache
Author: Chris Wanstrath
Author-email: chris@ozmm.org
License: MIT
Description: ========
        Pystache
        ========
        
        .. image:: https://s3.amazonaws.com/webdev_bucket/pystache.png
        
        Mustache_ is a framework-agnostic way to render logic-free views that is
        inspired by ctemplate_ and et_.  Like ctemplate_, "it emphasizes
        separating logic from presentation: it is impossible to embed application
        logic in this template language."
        
        The `mustache(5)`_ man page provides a good introduction to Mustache's
        syntax.  For a more complete (and more current) description of Mustache's
        behavior, see the official Mustache spec_.
        
        Pystache_ is a Python implementation of Mustache.  It currently passes
        all tests in `version 1.0.3`_ of the Mustache spec_.  Pystache itself is
        `semantically versioned`_.
        
        Logo: `David Phillips`_
        
        Requirements
        ============
        
        Pystache is currently tested under Python 2.6.
        
        Install It
        ==========
        
        ::
        
            pip install pystache
        
        
        Use It
        ======
        
        ::
        
            >>> import pystache
            >>> pystache.render('Hi {{person}}!', {'person': 'Mom'})
            u'Hi Mom!'
        
        You can also create dedicated view classes to hold your view logic.
        
        Here's your view class (in examples/readme.py)::
        
            class SayHello(object):
        
                def to(self):
                    return "Pizza"
        
        Like so::
        
            >>> from examples.readme import SayHello
            >>> hello = SayHello()
        
        Then your template, say_hello.mustache::
        
            Hello, {{to}}!
        
        Pull it together::
        
            >>> renderer = pystache.Renderer()
            >>> renderer.render(hello)
            u'Hello, Pizza!'
        
        
        Test It
        =======
        
        nose_ works great! ::
        
            pip install nose
            cd pystache
            nosetests
        
        To include tests from the Mustache spec_ in your test runs: ::
        
            git submodule init
            git submodule update
        
        To run all available tests (including doctests)::
        
            nosetests --with-doctest --doctest-extension=rst
        
        
        Mailing List
        ==================
        
        As of November 2011, there's a mailing list, pystache@librelist.com.
        
        Archive: http://librelist.com/browser/pystache/
        
        Note: There's a bit of a delay in seeing the latest emails appear
        in the archive.
        
        Author
        ======
        
        ::
        
            >>> context = { 'author': 'Chris Wanstrath', 'email': 'chris@ozmm.org' }
            >>> pystache.render("{{author}} :: {{email}}", context)
            u'Chris Wanstrath :: chris@ozmm.org'
        
        
        .. _ctemplate: http://code.google.com/p/google-ctemplate/
        .. _David Phillips: http://davidphillips.us/
        .. _et: http://www.ivan.fomichev.name/2008/05/erlang-template-engine-prototype.html
        .. _Mustache: http://mustache.github.com/
        .. _mustache(5): http://mustache.github.com/mustache.5.html
        .. _nose: http://somethingaboutorange.com/mrl/projects/nose/0.11.1/testing.html
        .. _Pystache: https://github.com/defunkt/pystache
        .. _semantically versioned: http://semver.org
        .. _spec: https://github.com/mustache/spec
        .. _version 1.0.3: https://github.com/mustache/spec/tree/48c933b0bb780875acbfd15816297e263c53d6f7
        
        
        History
        =======
        
        Next Release (version TBD)
        --------------------------
        
        Features:
        
        * Views and Renderers accept a custom template loader.  Also, this loader
          can be a dictionary of partials. [cjerdonek]
        * Added a command-line interface. [vrde, cjerdonek]
        * Markupsafe can now be disabled after import. [cjerdonek]
        * Custom escape function can now be passed to Template constructor. [cjerdonek]
        * Template class can now handle non-ascii characters in non-unicode strings.
          Added default_encoding and decode_errors to Template constructor arguments.
          [cjerdonek]
        * Loader supports a decode_errors argument. [cjerdonek]
        
        API changes:
        
        * Template class replaced by a Renderer class. [cjerdonek]
        * ``Loader.load_template()`` changed to ``Loader.get()``. [cjerdonek]
        * Removed output_encoding options. [cjerdonek]
        * Removed automatic use of markupsafe, if available. [cjerdonek]
        
        Bug fixes:
        
        * Context values no longer processed as template strings. [jakearchibald]
        * Passing ``**kwargs`` to ``Template()`` modified the context. [cjerdonek]
        * Passing ``**kwargs`` to ``Template()`` with no context raised an exception. [cjerdonek]
        * Whitespace surrounding sections is no longer altered, in accordance with
          the mustache spec. [heliodor]
        * Fixed an issue that affected the rendering of zeroes when using certain
          implementations of Python (i.e. PyPy). [alex]
        * Extensionless template files could not be loaded. [cjerdonek]
        * Multline comments now permitted. [fczuardi]
        
        Misc:
        
        * Added some docstrings. [kennethreitz]
        
        0.4.0 (2011-01-12)
        ------------------
        * Add support for nested contexts (within template and view)
        * Add support for inverted lists
        * Decoupled template loading
        
        0.3.1 (2010-05-07)
        ------------------
        
        * Fix package
        
        0.3.0 (2010-05-03)
        ------------------
        
        * View.template_path can now hold a list of path
        * Add {{& blah}} as an alias for {{{ blah }}}
        * Higher Order Sections
        * Inverted sections
        
        0.2.0 (2010-02-15)
        ------------------
        
        * Bugfix: Methods returning False or None are not rendered
        * Bugfix: Don't render an empty string when a tag's value is 0. [enaeseth]
        * Add support for using non-callables as View attributes. [joshthecoder]
        * Allow using View instances as attributes. [joshthecoder]
        * Support for Unicode and non-ASCII-encoded bytestring output. [enaeseth]
        * Template file encoding awareness. [enaeseth]
        
        0.1.1 (2009-11-13)
        ------------------
        
        * Ensure we're dealing with strings, always
        * Tests can be run by executing the test file directly
        
        0.1.0 (2009-11-12)
        ------------------
        
        * First release
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
