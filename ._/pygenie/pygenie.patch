diff -Nru pygenie_orig/cc.py pygenie/cc.py
--- pygenie_orig/cc.py	2008-03-26 01:37:55.000000000 +0530
+++ pygenie/cc.py	2010-08-22 01:09:24.835059464 +0530
@@ -37,6 +37,71 @@
     __repr__ = __str__
 
 
+class FlatStats(object):
+    '''Create list of flat stats
+
+       stats in init and flattenStats is of type class Stats
+       flatStats is a list of lists with each list containing
+       'C/M/F/X', Name, complexity
+       summaryStats is a dictionary with keys X/C/M/F/T and value is
+       a list of [count, complexity]
+    '''
+
+    def __init__(self, stats=None):
+        self.summaryStats = {'X':[0, 0],
+                             'C':[0, 0],
+                             'M':[0, 0],
+                             'F':[0, 0],
+                             'T':[0, 0]}
+        if stats:
+            self.flatStats = self.flattenStats(stats)
+            self.computeSummary()
+
+    def flattenStats(self, stats):
+        def flatten(stats, ns=None):
+            if not ns:
+                yield 'X', stats.name, stats.complexity
+            for s in stats.classes:
+                name = '.'.join(filter(None, [ns, s.name]))
+                yield 'C', name, s.complexity
+                for x in s.functions:
+                    fname = '.'.join([name, x.name])
+                    yield 'M', fname, x.complexity
+            for s in stats.functions:
+                name = '.'.join(filter(None, [ns, s.name]))
+                yield 'F', name, s.complexity
+
+        return [t for t in flatten(stats)]
+
+    def computeSummary(self):
+        count = 0
+        complexity = 0
+        for row in self.flatStats:
+            self.summaryStats[row[0]][0] = self.summaryStats[row[0]][0] + 1
+            self.summaryStats['T'][0] = self.summaryStats['T'][0] + 1
+            self.summaryStats[row[0]][1] = self.summaryStats[row[0]][1] + row[2]
+            self.summaryStats['T'][1] = self.summaryStats['T'][1] + row[2]
+
+    def __add__(self, other):
+        '''addition is only for summary stats'''
+        result = FlatStats()
+        for idx in 'XCMFT':
+            for i in range(2):
+                result.summaryStats[idx][i] = self.summaryStats[idx][i] + other.summaryStats[idx][i]
+        return result
+
+    def __str__(self):
+        string = '''----------------------------------
+Type         Count      Complexity
+----------------------------------'''
+        for idx in 'XCMFT':
+            string = string + '''
+%s        %8d         %8d''' % (idx, self.summaryStats[idx][0], self.summaryStats[idx][1])
+        string = (string + '\n' +
+'----------------------------------\n')
+        return string
+
+
 class CCVisitor(ASTVisitor):
     """Encapsulates the cyclomatic complexity counting."""
 
@@ -88,8 +153,11 @@
         self.stats.complexity += 1
 
 
-def measure_complexity(ast, module_name=None):
-    return CCVisitor(ast, description=module_name).stats
+def measure_complexity(ast, module_name=None, stats=None):
+    try:
+        return FlatStats(CCVisitor(ast, stats, module_name).stats)
+    except Exception:
+        return None 
 
 
 class Table(object):
@@ -111,21 +179,26 @@
     def __nonzero__(self):
         return len(self.rows)
 
-
 class PrettyPrinter(object):
 
-    def __init__(self, out, verbose=False):
+    def __init__(self, out, complexity=False, threshold=7, summary=False):
         self.out = out
-        self.verbose = verbose
+        self.complexity = complexity
+        self.threshold = threshold
+        self.summary = summary
 
     def pprint(self, filename, stats):
-        self.out.write('File: %s\n' % filename)
-
-        stats = self.flatten_stats(stats)
+        if self.complexity or self.summary:
+            self.out.write('File: %s\n' % filename)
+            if self.complexity:
+                self.pprint_complexity(stats.flatStats)
+            if self.summary:
+                self.pprint_summary(stats)
+            self.out.write('\n')
 
-        if not self.verbose:
-            # filter out suites with low complexity numbers
-            stats = (row for row in stats if row[-1] > 7)
+    def pprint_complexity(self, stats):
+        # filter out suites with low complexity numbers
+        stats = (row for row in stats if row[-1] > self.threshold)
 
         stats = sorted(stats, lambda a, b: cmp(b[2], a[2]))
 
@@ -134,9 +207,13 @@
             self.pprint_table(table)
         else:
             self.out.write('This code looks all good!\n')
-        self.out.write('\n')
+
+    def pprint_summary(self, stats):
+        self.out.write('Summary\n')
+        self.out.write(str(stats))
 
     def pprint_table(self, table):
+        self.out.write('-' * (sum(table.max_col_sizes) + len(table.headings) - 1) + '\n')
         for n, col in enumerate(table.headings):
             self.out.write(str(col).ljust(table.max_col_sizes[n] + 1))
         self.out.write('\n')
@@ -145,21 +222,5 @@
             for n, col in enumerate(row):
                 self.out.write(str(col).ljust(table.max_col_sizes[n] + 1))
             self.out.write('\n')
-
-    def flatten_stats(self, stats):
-        def flatten(stats, ns=None):
-            if not ns:
-                yield 'X', stats.name, stats.complexity
-            for s in stats.classes:
-                name = '.'.join(filter(None, [ns, s.name]))
-                yield 'C', name, s.complexity
-                for x in s.functions:
-                    fname = '.'.join([name, x.name])
-                    yield 'M', fname, x.complexity
-            for s in stats.functions:
-                name = '.'.join(filter(None, [ns, s.name]))
-                yield 'F', name, s.complexity
-        
-        return [t for t in flatten(stats)]
-
+        self.out.write('-' * (sum(table.max_col_sizes) + len(table.headings) - 1) + '\n')
 
Binary files pygenie_orig/cc.pyc and pygenie/cc.pyc differ
diff -Nru pygenie_orig/pygenie.patch pygenie/pygenie.patch
--- pygenie_orig/pygenie.patch	1970-01-01 05:30:00.000000000 +0530
+++ pygenie/pygenie.patch	2010-08-22 16:34:28.081119429 +0530
@@ -0,0 +1,431 @@
+diff -Nru pygenie_orig/cc.py pygenie/cc.py
+--- pygenie_orig/cc.py	2008-03-26 01:37:55.000000000 +0530
++++ pygenie/cc.py	2010-08-22 00:31:16.507714718 +0530
+@@ -37,6 +37,71 @@
+     __repr__ = __str__
+ 
+ 
++class FlatStats(object):
++    '''Create list of flat stats
++
++       stats in init and flattenStats is of type class Stats
++       flatStats is a list of lists with each list containing
++       'C/M/F/X', Name, complexity
++       summaryStats is a dictionary with keys X/C/M/F/T and value is
++       a list of [count, complexity]
++    '''
++
++    def __init__(self, stats=None):
++        self.summaryStats = {'X':[0, 0],
++                             'C':[0, 0],
++                             'M':[0, 0],
++                             'F':[0, 0],
++                             'T':[0, 0]}
++        if stats:
++            self.flatStats = self.flattenStats(stats)
++            self.computeSummary()
++
++    def flattenStats(self, stats):
++        def flatten(stats, ns=None):
++            if not ns:
++                yield 'X', stats.name, stats.complexity
++            for s in stats.classes:
++                name = '.'.join(filter(None, [ns, s.name]))
++                yield 'C', name, s.complexity
++                for x in s.functions:
++                    fname = '.'.join([name, x.name])
++                    yield 'M', fname, x.complexity
++            for s in stats.functions:
++                name = '.'.join(filter(None, [ns, s.name]))
++                yield 'F', name, s.complexity
++
++        return [t for t in flatten(stats)]
++
++    def computeSummary(self):
++        count = 0
++        complexity = 0
++        for row in self.flatStats:
++            self.summaryStats[row[0]][0] = self.summaryStats[row[0]][0] + 1
++            self.summaryStats['T'][0] = self.summaryStats['T'][0] + 1
++            self.summaryStats[row[0]][1] = self.summaryStats[row[0]][1] + row[2]
++            self.summaryStats['T'][1] = self.summaryStats['T'][1] + row[2]
++
++    def __add__(self, other):
++        '''addition is only for summary stats'''
++        result = FlatStats()
++        for idx in 'XCMFT':
++            for i in range(2):
++                result.summaryStats[idx][i] = self.summaryStats[idx][i] + other.summaryStats[idx][i]
++        return result
++
++    def __str__(self):
++        string = '''----------------------------------
++Type         Count      Complexity
++----------------------------------'''
++        for idx in 'XCMFT':
++            string = string + '''
++%s        %8d         %8d''' % (idx, self.summaryStats[idx][0], self.summaryStats[idx][1])
++        string = (string + '\n' +
++'----------------------------------\n')
++        return string
++
++
+ class CCVisitor(ASTVisitor):
+     """Encapsulates the cyclomatic complexity counting."""
+ 
+@@ -88,8 +153,11 @@
+         self.stats.complexity += 1
+ 
+ 
+-def measure_complexity(ast, module_name=None):
+-    return CCVisitor(ast, description=module_name).stats
++def measure_complexity(ast, module_name=None, stats=None):
++    try:
++        return FlatStats(CCVisitor(ast, stats, module_name).stats)
++    except Exception:
++        return None 
+ 
+ 
+ class Table(object):
+@@ -111,21 +179,26 @@
+     def __nonzero__(self):
+         return len(self.rows)
+ 
+-
+ class PrettyPrinter(object):
+ 
+-    def __init__(self, out, verbose=False):
++    def __init__(self, out, complexity=False, threshold=7, summary=False):
+         self.out = out
+-        self.verbose = verbose
++        self.complexity = complexity
++        self.threshold = threshold
++        self.summary = summary
+ 
+     def pprint(self, filename, stats):
+-        self.out.write('File: %s\n' % filename)
+-
+-        stats = self.flatten_stats(stats)
++        if self.complexity or self.summary:
++            self.out.write('File: %s\n' % filename)
++            if self.complexity:
++                self.pprint_complexity(stats.flatStats)
++            if self.summary:
++                self.pprint_summary(stats)
++            self.out.write('\n')
+ 
+-        if not self.verbose:
+-            # filter out suites with low complexity numbers
+-            stats = (row for row in stats if row[-1] > 7)
++    def pprint_complexity(self, stats):
++        # filter out suites with low complexity numbers
++        stats = (row for row in stats if row[-1] > self.threshold)
+ 
+         stats = sorted(stats, lambda a, b: cmp(b[2], a[2]))
+ 
+@@ -134,9 +207,13 @@
+             self.pprint_table(table)
+         else:
+             self.out.write('This code looks all good!\n')
+-        self.out.write('\n')
++
++    def pprint_summary(self, stats):
++        self.out.write('Summary\n')
++        self.out.write(str(stats))
+ 
+     def pprint_table(self, table):
++        self.out.write('-' * (sum(table.max_col_sizes) + len(table.headings) - 1) + '\n')
+         for n, col in enumerate(table.headings):
+             self.out.write(str(col).ljust(table.max_col_sizes[n] + 1))
+         self.out.write('\n')
+@@ -145,21 +222,5 @@
+             for n, col in enumerate(row):
+                 self.out.write(str(col).ljust(table.max_col_sizes[n] + 1))
+             self.out.write('\n')
+-
+-    def flatten_stats(self, stats):
+-        def flatten(stats, ns=None):
+-            if not ns:
+-                yield 'X', stats.name, stats.complexity
+-            for s in stats.classes:
+-                name = '.'.join(filter(None, [ns, s.name]))
+-                yield 'C', name, s.complexity
+-                for x in s.functions:
+-                    fname = '.'.join([name, x.name])
+-                    yield 'M', fname, x.complexity
+-            for s in stats.functions:
+-                name = '.'.join(filter(None, [ns, s.name]))
+-                yield 'F', name, s.complexity
+-        
+-        return [t for t in flatten(stats)]
+-
++        self.out.write('-' * (sum(table.max_col_sizes) + len(table.headings) - 1) + '\n')
+ 
+diff -Nru pygenie_orig/pygenie.py pygenie/pygenie.py
+--- pygenie_orig/pygenie.py	2008-03-26 01:37:55.000000000 +0530
++++ pygenie/pygenie.py	2010-08-22 00:33:16.466966103 +0530
+@@ -7,73 +7,128 @@
+ 
+ import cc
+ 
++USAGE = 'usage: %prog [options] *.py'
++VERSION = 'Sat Aug 21 version with support for overall complexity (http://aufather.wordpress.com)'
+ 
+-COMMANDS = ['all', 'complexity', ]
+-USAGE = 'usage: pygenie command [directories|files|packages]'
+ 
++def parse_cmd_args():
++    from optparse import OptionParser
+ 
+-class CommandParser(object):
+-
+-    def __init__ (self, optparser, commands):
+-        self.commands = commands or []
+-        self.optparser = optparser
+-
+-    def parse_args(self, args=None, values=None):
+-        args = args or sys.argv[1:]
+-        if len(args) < 1:
+-            self.optparser.error('please provide a valid command')
+-
+-        command = args[0]
+-        if command not in self.commands:
+-            self.optparser.error("'%s' is not a valid command" % command)
+-            
+-        options, values = self.optparser.parse_args(args[1:], values)
+-        return command, options, values
+-
+-
+-def find_module(fqn):
+-    join = os.path.join
+-    exists = os.path.exists
+-    partial_path = fqn.replace('.', os.path.sep)
+-    for p in sys.path:
+-        path = join(p, partial_path, '__init__.py')
+-        if exists(path):
+-            return path
+-        path = join(p, partial_path + '.py')
+-        if exists(path):
+-            return path
+-    raise Exception('invalid module')
++    parser = OptionParser(usage=USAGE, version=VERSION)
++    parser.add_option('-c', '--complexity', dest='complexity',
++            action='store_true', default=False,
++            help='print complexity details for each file/module')
++    parser.add_option('-t', '--threshold', dest='threshold',
++            type='int', default=7,
++            help='threshold of complexity to be ignored (default=7)')
++    parser.add_option('-a', '--all', dest='allItems',
++            action='store_true', default=False,
++            help='print all metrics')
++    parser.add_option('-s', '--summary', dest='summary',
++            action='store_true', default=False,
++            help='print cumulative summary for each file/module')
++    parser.add_option('-r', '--recurse', dest='recurse',
++            action='store_true', default=False,
++            help='process files recursively in a folder')
++    parser.add_option('-d', '--debug', dest='debug',
++            action='store_true', default=False,
++            help='print debugging info like file being processed')
++    parser.add_option('-o', '--outfile', dest='outFile',
++            default=None,
++            help='output to OUTFILE (default=stdout)')
++    options, args = parser.parse_args()
++
++    if (options.allItems):
++        options.complexity = True
++        options.summary = True
++
++    return (options, args)
++
++
++class FileList(object):
++    '''Get set of files recursively'''
++    def __init__(self, args, recurse=False):
++        self.args = args
++        self.recurse = recurse
++        self.files = set()
++        self.getAll()
++
++    def getAll(self):
++        for arg in self.args:
++            arg = os.path.expandvars(os.path.expanduser(arg))
++            if os.path.isdir(arg):
++                self.getDirs(arg)
++            elif os.path.isfile(arg):
++                self.getFiles(arg)
++            else:
++                self.getPackages(arg)
++
++    def getDirs(self, name):
++        if self.recurse:
++            self.getDirsRecursively(name)
++            return
++
++        for f in glob(os.path.join(name, '*.py')):
++            if os.path.isfile(f):
++                self.files.add(os.path.abspath(f))
++
++    def getDirsRecursively(self, name):
++        for root, folders, files in os.walk(name):
++            for f in files:
++                if f.endswith(".py"):
++                    self.files.add(os.path.abspath(os.path.join(root, f)))
++
++    def getFiles(self, name):
++        if name.endswith(".py"):
++            # only check for python files
++            self.files.add(os.path.abspath(name))
++
++    def getPackages(self, name):
++        join = os.path.join
++        exists = os.path.exists
++        partial_path = name.replace('.', os.path.sep)
++        for p in sys.path:
++            path = join(p, partial_path, '__init__.py')
++            if exists(path):
++                self.files.add(os.path.abspath(path))
++            path = join(p, partial_path + '.py')
++            if exists(path):
++                self.files.add(os.path.abspath(path))
++        raise Exception('invalid module')
++
++
++def print_fail_files(fail):
++    if len(fail):
++        outFile.write("Totally %d files failed\n" % len(fail))
++        for f in fail:
++            outFile.write("FAILED to process file: %s\n" % f)
+ 
+ 
+ def main():
+-    from optparse import OptionParser
+-
+-    parser = OptionParser(usage='./cc.py command [options] *.py')
+-    parser.add_option('-v', '--verbose',
+-            dest='verbose', action='store_true', default=False,
+-            help='print detailed statistics to stdout')
+-    parser = CommandParser(parser, COMMANDS)
+-    command, options, args = parser.parse_args()
+-
+-    items = set()
+-    for arg in args: 
+-        if os.path.isdir(arg):
+-            for f in glob(os.path.join(arg, '*.py')):
+-                if os.path.isfile(f):
+-                    items.add(os.path.abspath(f))
+-        elif os.path.isfile(arg):
+-            items.add(os.path.abspath(arg))
+-        else:
+-            # this should be a package'
+-            items.add(find_module(arg))
+-
+-    for item in items:
+-        code = open(item).read()
+-        if command in ('all', 'complexity'):
+-            stats = cc.measure_complexity(code, item)
+-            pp = cc.PrettyPrinter(sys.stdout, verbose=options.verbose)
+-            pp.pprint(item, stats)
+-
++    options, args = parse_cmd_args()
++    files = FileList(args, options.recurse).files
++    outFile = sys.stdout
++    fail = set()
++    if options.outFile:
++        outFile = open(options.outFile, 'w')
++    pp = cc.PrettyPrinter(outFile, options.complexity,
++                          options.threshold, options.summary)
++    sumStats = cc.FlatStats()
++    for f in files:
++        if options.debug:
++            print "File being processed: ", f
++        code = open(f).read() + '\n'
++        stats = cc.measure_complexity(code, f)
++        if not stats:
++            print "FAILED to process file: ", f
++            fail.add(f)
++            continue
++        sumStats = sumStats + stats
++        pp.pprint(f, stats)
++    outFile.write("Total Cumulative Statistics\n")
++    outFile.write(str(sumStats))
++    outFile.write('\n')
++    print_fail_files(fail)
+ 
+ if __name__ == '__main__':
+     main()
+diff -Nru pygenie_orig/test_cc.py pygenie/test_cc.py
+--- pygenie_orig/test_cc.py	2010-08-21 04:00:34.953780492 +0530
++++ pygenie/test_cc.py	2010-08-21 03:59:14.732166494 +0530
+@@ -111,7 +111,7 @@
+ 
+ def test_snippets():
+     def _assert(expected_complexity, code):
+-        stats = measure_complexity(code)
++        stats = measure_complexity(code).flatStats
+         print stats.complexity, expected_complexity
+         assert stats.complexity == expected_complexity
+     for snippet in simple_complexity_snippets:
+@@ -123,7 +123,7 @@
+         def f():
+             pass
+     """)
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     assert stats.complexity == 1
+     assert stats.functions[0].complexity == 1
+ 
+@@ -136,7 +136,7 @@
+                 else:
+                     pass
+     ''')
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     assert stats.classes == []
+     assert len(stats.functions) == 1
+     assert stats.functions[0].name == 'f'
+@@ -150,7 +150,7 @@
+             else:
+                 pass
+     ''')
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     assert stats.name == '<module>'
+     assert stats.classes == []
+     assert stats.functions == []
+@@ -166,7 +166,7 @@
+                     if False:
+                         pass
+     ''')
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     assert stats.name == '<module>'
+     assert stats.classes[0].name == 'A'
+     assert stats.classes[0].complexity == 2
+@@ -188,7 +188,7 @@
+                     if x % 2:
+                         print 'odd'
+     ''')
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     f, g, h = stats.functions
+     assert f.complexity == 2
+     assert g.complexity == 2
+@@ -204,7 +204,7 @@
+             incr = lambda x: x + 1
+             decr = lambda x: x - 1
+     ''')
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     incr, decr, f = stats.functions
+     assert incr.complexity == 1
+     assert decr.complexity == 1
+@@ -221,7 +221,7 @@
+                     pass
+ 
+     ''')
+-    stats = measure_complexity(code)
++    stats = measure_complexity(code).flatStats
+     assert stats.classes[0].name == 'A'
+     assert stats.classes[0].complexity == 2
+     assert stats.classes[0].classes[0].name == 'Inner'
diff -Nru pygenie_orig/pygenie.py pygenie/pygenie.py
--- pygenie_orig/pygenie.py	2008-03-26 01:37:55.000000000 +0530
+++ pygenie/pygenie.py	2010-08-22 01:23:12.226033355 +0530
@@ -7,73 +7,127 @@
 
 import cc
 
+USAGE = 'usage: %prog [options] *.py'
+VERSION = 'Sat Aug 21 version with support for overall complexity (http://aufather.wordpress.com)'
 
-COMMANDS = ['all', 'complexity', ]
-USAGE = 'usage: pygenie command [directories|files|packages]'
 
+def parse_cmd_args():
+    from optparse import OptionParser
 
-class CommandParser(object):
-
-    def __init__ (self, optparser, commands):
-        self.commands = commands or []
-        self.optparser = optparser
-
-    def parse_args(self, args=None, values=None):
-        args = args or sys.argv[1:]
-        if len(args) < 1:
-            self.optparser.error('please provide a valid command')
-
-        command = args[0]
-        if command not in self.commands:
-            self.optparser.error("'%s' is not a valid command" % command)
-            
-        options, values = self.optparser.parse_args(args[1:], values)
-        return command, options, values
-
-
-def find_module(fqn):
-    join = os.path.join
-    exists = os.path.exists
-    partial_path = fqn.replace('.', os.path.sep)
-    for p in sys.path:
-        path = join(p, partial_path, '__init__.py')
-        if exists(path):
-            return path
-        path = join(p, partial_path + '.py')
-        if exists(path):
-            return path
-    raise Exception('invalid module')
+    parser = OptionParser(usage=USAGE, version=VERSION)
+    parser.add_option('-c', '--complexity', dest='complexity',
+            action='store_true', default=False,
+            help='print complexity details for each file/module')
+    parser.add_option('-t', '--threshold', dest='threshold',
+            type='int', default=7,
+            help='threshold of complexity to be ignored (default=7)')
+    parser.add_option('-a', '--all', dest='allItems',
+            action='store_true', default=False,
+            help='print all metrics')
+    parser.add_option('-s', '--summary', dest='summary',
+            action='store_true', default=False,
+            help='print cumulative summary for each file/module')
+    parser.add_option('-r', '--recurs', dest='recurs',
+            action='store_true', default=False,
+            help='process files recursively in a folder')
+    parser.add_option('-d', '--debug', dest='debug',
+            action='store_true', default=False,
+            help='print debugging info like file being processed')
+    parser.add_option('-o', '--outfile', dest='outFile',
+            default=None,
+            help='output to OUTFILE (default=stdout)')
+    options, args = parser.parse_args()
+
+    if (options.allItems):
+        options.complexity = True
+        options.summary = True
+
+    return (options, args)
+
+
+class FileList(object):
+    '''Get set of files recursively'''
+    def __init__(self, args, recurs=False):
+        self.args = args
+        self.recurs = recurs
+        self.files = set()
+        self.getAll()
+
+    def getAll(self):
+        for arg in self.args:
+            arg = os.path.expandvars(os.path.expanduser(arg))
+            if os.path.isdir(arg):
+                self.getDirs(arg)
+            elif os.path.isfile(arg):
+                self.getFiles(arg)
+            else:
+                self.getPackages(arg)
+
+    def getDirs(self, name):
+        if self.recurs:
+            self.getDirsRecursively(name)
+            return
+
+        for f in glob(os.path.join(name, '*.py')):
+            if os.path.isfile(f):
+                self.files.add(os.path.abspath(f))
+
+    def getDirsRecursively(self, name):
+        for root, folders, files in os.walk(name):
+            for f in files:
+                if f.endswith(".py"):
+                    self.files.add(os.path.abspath(os.path.join(root, f)))
+
+    def getFiles(self, name):
+        if name.endswith(".py"):
+            # only check for python files
+            self.files.add(os.path.abspath(name))
+
+    def getPackages(self, name):
+        join = os.path.join
+        exists = os.path.exists
+        partial_path = name.replace('.', os.path.sep)
+        for p in sys.path:
+            path = join(p, partial_path, '__init__.py')
+            if exists(path):
+                self.files.add(os.path.abspath(path))
+            path = join(p, partial_path + '.py')
+            if exists(path):
+                self.files.add(os.path.abspath(path))
+        raise Exception('invalid module')
+
+
+def print_fail_files(fail, outFile=sys.stdout):
+    if len(fail):
+        outFile.write("Totally %d files failed\n" % len(fail))
+        for f in fail:
+            outFile.write("FAILED to process file: %s\n" % f)
 
 
 def main():
-    from optparse import OptionParser
-
-    parser = OptionParser(usage='./cc.py command [options] *.py')
-    parser.add_option('-v', '--verbose',
-            dest='verbose', action='store_true', default=False,
-            help='print detailed statistics to stdout')
-    parser = CommandParser(parser, COMMANDS)
-    command, options, args = parser.parse_args()
-
-    items = set()
-    for arg in args: 
-        if os.path.isdir(arg):
-            for f in glob(os.path.join(arg, '*.py')):
-                if os.path.isfile(f):
-                    items.add(os.path.abspath(f))
-        elif os.path.isfile(arg):
-            items.add(os.path.abspath(arg))
-        else:
-            # this should be a package'
-            items.add(find_module(arg))
-
-    for item in items:
-        code = open(item).read()
-        if command in ('all', 'complexity'):
-            stats = cc.measure_complexity(code, item)
-            pp = cc.PrettyPrinter(sys.stdout, verbose=options.verbose)
-            pp.pprint(item, stats)
-
+    options, args = parse_cmd_args()
+    files = FileList(args, options.recurs).files
+    outFile = sys.stdout
+    fail = set()
+    if options.outFile:
+        outFile = open(options.outFile, 'w')
+    pp = cc.PrettyPrinter(outFile, options.complexity,
+                          options.threshold, options.summary)
+    sumStats = cc.FlatStats()
+    for f in files:
+        if options.debug:
+            print "File being processed: ", f
+        code = open(f).read() + '\n'
+        stats = cc.measure_complexity(code, f)
+        if not stats:
+            fail.add(f)
+            continue
+        sumStats = sumStats + stats
+        pp.pprint(f, stats)
+    outFile.write("Total Cumulative Statistics\n")
+    outFile.write(str(sumStats))
+    outFile.write('\n')
+    print_fail_files(fail, outFile)
 
 if __name__ == '__main__':
     main()
diff -Nru pygenie_orig/test_cc.py pygenie/test_cc.py
--- pygenie_orig/test_cc.py	2010-08-21 04:00:34.953780492 +0530
+++ pygenie/test_cc.py	2010-08-21 03:59:14.732166494 +0530
@@ -111,7 +111,7 @@
 
 def test_snippets():
     def _assert(expected_complexity, code):
-        stats = measure_complexity(code)
+        stats = measure_complexity(code).flatStats
         print stats.complexity, expected_complexity
         assert stats.complexity == expected_complexity
     for snippet in simple_complexity_snippets:
@@ -123,7 +123,7 @@
         def f():
             pass
     """)
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     assert stats.complexity == 1
     assert stats.functions[0].complexity == 1
 
@@ -136,7 +136,7 @@
                 else:
                     pass
     ''')
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     assert stats.classes == []
     assert len(stats.functions) == 1
     assert stats.functions[0].name == 'f'
@@ -150,7 +150,7 @@
             else:
                 pass
     ''')
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     assert stats.name == '<module>'
     assert stats.classes == []
     assert stats.functions == []
@@ -166,7 +166,7 @@
                     if False:
                         pass
     ''')
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     assert stats.name == '<module>'
     assert stats.classes[0].name == 'A'
     assert stats.classes[0].complexity == 2
@@ -188,7 +188,7 @@
                     if x % 2:
                         print 'odd'
     ''')
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     f, g, h = stats.functions
     assert f.complexity == 2
     assert g.complexity == 2
@@ -204,7 +204,7 @@
             incr = lambda x: x + 1
             decr = lambda x: x - 1
     ''')
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     incr, decr, f = stats.functions
     assert incr.complexity == 1
     assert decr.complexity == 1
@@ -221,7 +221,7 @@
                     pass
 
     ''')
-    stats = measure_complexity(code)
+    stats = measure_complexity(code).flatStats
     assert stats.classes[0].name == 'A'
     assert stats.classes[0].complexity == 2
     assert stats.classes[0].classes[0].name == 'Inner'
